{
  "apiVersion": "5.2.1.3",
  "swaggerVersion": "1.2",
  "basePath": "https://localhost:9000/pa-admin-api/v3",
  "resourcePath": "/auth",
  "apis": [
    {
      "path": "/auth/basic",
      "operations": [
        {
          "method": "DELETE",
          "summary": "Resets the HTTP Basic Authentication configuration to default values",
          "notes": "",
          "type": "void",
          "nickname": "deleteBasicAuthCommand",
          "parameters": []
        },
        {
          "method": "GET",
          "summary": "Get the HTTP Basic Authentication configuration",
          "notes": "",
          "type": "BasicConfig",
          "nickname": "getBasicAuthCommand",
          "parameters": []
        },
        {
          "method": "PUT",
          "summary": "Update the Basic Authentication configuration",
          "notes": "",
          "type": "BasicAuthConfigView",
          "nickname": "updateBasicAuthCommand",
          "parameters": [
            {
              "name": "BasicConfig",
              "description": "Basic configuration to update",
              "required": true,
              "allowMultiple": false,
              "type": "BasicAuthConfigView",
              "paramType": "body"
            }
          ]
        }
      ]
    },
    {
      "path": "/auth/oauth",
      "operations": [
        {
          "method": "DELETE",
          "summary": "Resets the OAuth Authentication configuration to default values",
          "notes": "",
          "type": "void",
          "nickname": "deleteOAuthAuthCommand",
          "parameters": []
        },
        {
          "method": "GET",
          "summary": "Get the OAuth Authentication configuration",
          "notes": "",
          "type": "OAuthConfigView",
          "nickname": "getOAuthAuthCommand",
          "parameters": []
        },
        {
          "method": "PUT",
          "summary": "Update the OAuth Authentication configuration",
          "notes": "",
          "type": "OAuthConfigView",
          "nickname": "updateOAuthAuthCommand",
          "parameters": [
            {
              "name": "OAuthConfig",
              "description": "OAuth configuration to update",
              "required": true,
              "allowMultiple": false,
              "type": "OAuthConfigView",
              "paramType": "body"
            }
          ]
        }
      ]
    },
    {
      "path": "/auth/oidc",
      "operations": [
        {
          "method": "DELETE",
          "summary": "Resets the OIDC Authentication configuration to default values",
          "notes": "",
          "type": "void",
          "nickname": "deleteOidcAuthCommand",
          "parameters": []
        },
        {
          "method": "GET",
          "summary": "Get the OIDC Authentication configuration",
          "notes": "",
          "type": "OidcConfigView",
          "nickname": "getOidcAuthCommand",
          "parameters": []
        },
        {
          "method": "PUT",
          "summary": "Update the OIDC Authentication configuration",
          "notes": "",
          "type": "OidcConfigView",
          "nickname": "updateOidcAuthCommand",
          "parameters": [
            {
              "name": "OidcConfig",
              "description": "OIDC configuration to update",
              "required": true,
              "allowMultiple": false,
              "type": "OidcConfigView",
              "paramType": "body"
            }
          ]
        }
      ]
    },
    {
      "path": "/auth/webSession",
      "operations": [
        {
          "method": "DELETE",
          "summary": "Resets the Admin Web Session configuration to default values",
          "notes": "",
          "type": "void",
          "nickname": "deleteAdminBasicWebSessionCommand",
          "parameters": []
        },
        {
          "method": "GET",
          "summary": "Get the admin web session configuration",
          "notes": "",
          "type": "AdminBasicWebSessionView",
          "nickname": "getAdminBasicWebSessionCommand",
          "parameters": []
        },
        {
          "method": "PUT",
          "summary": "Update the admin web session configuration",
          "notes": "",
          "type": "AdminBasicWebSessionView",
          "nickname": "updateAdminBasicWebSessionCommand",
          "parameters": [
            {
              "name": "AdminWebSession",
              "description": "admin web session configuration to update",
              "required": true,
              "allowMultiple": false,
              "type": "AdminBasicWebSessionView",
              "paramType": "body"
            }
          ]
        }
      ]
    }
  ],
  "models": {
    "BasicAuthConfigView": {
      "id": "BasicAuthConfigView",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "This field is true if basic authentication to the Administrative API is enabled."
        }
      }
    },
    "OidcConfigView": {
      "id": "OidcConfigView",
      "required": [
        "oidcConfiguration"
      ],
      "properties": {
        "authnReqListId": {
          "type": "integer",
          "format": "int32",
          "description": "The ID of the authentication requirement list for Administrative SSO login to PingAccess."
        },
        "enabled": {
          "type": "boolean",
          "description": "This field is true to enable Administrator SSO Authentication."
        },
        "oidcConfiguration": {
          "$ref": "AdminWebSessionOidcConfigurationView",
          "description": "The OIDC configuration for the PA admin web session."
        },
        "roleMapping": {
          "$ref": "RoleMappingConfigurationView",
          "description": "The configuration for mapping user attributes to roles."
        },
        "useSlo": {
          "type": "boolean",
          "description": "Enable if OIDC single log out should be used on the /pa/oidc/logout for admin console."
        }
      }
    },
    "AdminWebSessionOidcConfigurationView": {
      "id": "AdminWebSessionOidcConfigurationView",
      "required": [
        "clientCredentials"
      ],
      "properties": {
        "cacheUserAttributes": {
          "type": "boolean",
          "description": "Specify if PingAccess should cache user attribute information for use in policy decisions. When disabled, this data is encoded and stored in the session cookie."
        },
        "clientCredentials": {
          "$ref": "OAuthClientCredentialsView",
          "description": "Specify the client credentials."
        },
        "enableRefreshUser": {
          "type": "boolean",
          "description": "Specify if you want to have PingAccess periodically refresh user data from PingFederate for use in policy decisions."
        },
        "oidcLoginType": {
          "$ref": "OidcLoginType",
          "description": "The web session token type.",
          "enum": [
            "Code",
            "POST",
            "x_post"
          ]
        },
        "pfsessionStateCacheInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Specify the number of seconds to cache PingFederate Session State information."
        },
        "refreshUserInfoClaimsInterval": {
          "type": "integer",
          "format": "int32",
          "description": "Specify the maximum number of seconds to cache user attribute information when the Refresh User is enabled."
        },
        "requestPreservationType": {
          "$ref": "RequestPreservationType",
          "enum": [
            "None",
            "POST",
            "All"
          ]
        },
        "requestProfile": {
          "type": "boolean"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sendRequestedUrlToProvider": {
          "type": "boolean",
          "description": "Specify if you want to send the requested URL as part of the authentication request to the OpenID Connect Provider."
        },
        "validateSessionIsAlive": {
          "type": "boolean",
          "description": "Specify if PingAccess should validate sessions with the configured PingFederate instance during request processing."
        },
        "webStorageType": {
          "$ref": "WebStorageType",
          "enum": [
            "SessionStorage",
            "LocalStorage"
          ]
        }
      }
    },
    "OAuthConfigView": {
      "id": "OAuthConfigView",
      "required": [
        "clientId",
        "scope"
      ],
      "properties": {
        "clientId": {
          "type": "string",
          "description": "The client_id of the OAuth client used for validating OAuth access tokens."
        },
        "clientSecret": {
          "$ref": "HiddenFieldView",
          "description": "The client_secret of the OAuth client used for validating OAuth access tokens."
        },
        "enabled": {
          "type": "boolean",
          "description": "This field is true if OAuth authentication to the Administrative API is enabled."
        },
        "roleMapping": {
          "$ref": "RoleMappingConfigurationView",
          "description": "The configuration for mapping user attributes to roles."
        },
        "scope": {
          "type": "string",
          "description": "The scope required to successfully access the API--for example, admin."
        },
        "subjectAttributeName": {
          "type": "string",
          "description": "The attribute you want to use from the OAuth access token as the subject for auditing purposes. At runtime, the attribute's value is used as the subject field in audit log entries for the Admin API."
        }
      }
    },
    "AttributeView": {
      "id": "AttributeView",
      "description": "A name-value pair of user attributes.",
      "required": [
        "attributeName",
        "attributeValue"
      ],
      "properties": {
        "attributeName": {
          "type": "string",
          "description": "The name of the user attribute."
        },
        "attributeValue": {
          "type": "string",
          "description": "The value of the user attribute."
        }
      }
    },
    "BasicConfig": {
      "id": "BasicConfig",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "This field is true if basic authentication to the Administrative API is enabled."
        }
      }
    },
    "RequiredAttributeMappingView": {
      "id": "RequiredAttributeMappingView",
      "description": "A set of user attributes that define a mandatory role mapping.",
      "required": [
        "attributes"
      ],
      "properties": {
        "attributes": {
          "type": "array",
          "description": "The attributes that define the role.",
          "items": {
            "$ref": "AttributeView"
          }
        }
      }
    },
    "OAuthClientCredentialsView": {
      "id": "OAuthClientCredentialsView",
      "required": [
        "clientId"
      ],
      "properties": {
        "clientId": {
          "type": "string",
          "description": "Specify the client ID."
        },
        "clientSecret": {
          "$ref": "HiddenFieldView",
          "description": "Specify the client secret."
        }
      }
    },
    "RoleMappingConfigurationView": {
      "id": "RoleMappingConfigurationView",
      "description": "Configuration for mapping user attributes to roles.",
      "properties": {
        "administrator": {
          "$ref": "RequiredAttributeMappingView",
          "description": "The user attribute configuration for determining if a user has an administrator role."
        },
        "auditor": {
          "$ref": "OptionalAttributeMappingView",
          "description": "The user attribute configuration for determining if a user has an auditor role."
        },
        "enabled": {
          "type": "boolean",
          "description": "Set to true to enable mapping of user attributes to roles."
        }
      }
    },
    "AdminBasicWebSessionView": {
      "id": "AdminBasicWebSessionView",
      "required": [
        "audience",
        "cookieType",
        "expirationWarningInMinutes",
        "idleTimeoutInMinutes",
        "sessionPollIntervalInSeconds",
        "sessionTimeoutInMinutes"
      ],
      "properties": {
        "audience": {
          "type": "string",
          "description": "Enter a unique identifier between 1 and 32 characters that defines who the PA Admin Token is applicable to."
        },
        "cookieDomain": {
          "type": "string",
          "description": "The domain where the cookie is stored--for example, corp.yourcompany.com."
        },
        "cookieType": {
          "$ref": "WebSessionCookieType",
          "description": "Specify an Encrypted JWT or a Signed JWT web session cookie.",
          "enum": [
            "Encrypted",
            "Signed"
          ]
        },
        "expirationWarningInMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "The time to have the UI display a warning before the session expires."
        },
        "idleTimeoutInMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "The length of time you want the PingAccess Admin Token to remain active when no activity is detected."
        },
        "sessionPollIntervalInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "The interval between UI polling for session validity."
        },
        "sessionTimeoutInMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "The length of time you want the PA Admin Token to remain active. Once the PA Admin Token expires, an authenticated user must re-authenticate."
        }
      }
    },
    "OptionalAttributeMappingView": {
      "id": "OptionalAttributeMappingView",
      "description": "A set of user attributes that define an optional role mapping.",
      "required": [
        "attributes"
      ],
      "properties": {
        "attributes": {
          "type": "array",
          "description": "The attributes that define the role.",
          "items": {
            "$ref": "AttributeView"
          }
        },
        "enabled": {
          "type": "boolean",
          "description": "Set to true to enable the role in the system."
        }
      }
    },
    "HiddenFieldView": {
      "id": "HiddenFieldView",
      "properties": {
        "encryptedValue": {
          "type": "string",
          "description": "The encrypted value of the field, as originally returned by the API."
        },
        "value": {
          "type": "string",
          "description": "The value of the field. This field takes precedence over the encryptedValue field, if both are specified."
        }
      }
    }
  }
}
